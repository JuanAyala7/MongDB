Note: Due to MongoDB & Mongoose version on the course is deprecated, most of my lines of code may also be outdated/deprecated. The purpose of creating this, however, is to go through the course and become educated on the material/fundamentals of backend development.

Saving our data to a MongoDB database so it can constantly update the inputs of our todolist.

This is the major difference between v1 & v2

This is important because if the server was to restart along with any changes being made on the app.js file, it will always be safely saved within the database.

Specified that the todolist is going to connect to the MongoDB along with the databse we want it to connect to (line 16 of app.js), now we need to create a new items schema.

The next thing we need to create is a new Mongoose model based on this schema. This will be initialized by creating a new constant with 'mongoose.model' and then specify the singular collection name (String) and the schema name.

So now we have a schema and we have a model created using that schema.

The next thing I want to do is  delete everything that's related to this day and getDate from v1.

Deleting the following:
const day = date.getDate();
const date = require (__dirname + "/date.js");
the date.js file

This is to simplify our code instead of having to use our date module and instead of having this 'date' file, we're going to render the default list with a title that's called "Today".

Before: res.render("list", {listTitle: day, newListItems: items});
After: res.render("list", {listTitle: "Today", newListItems: items});

Simplifying this will allow us to understand how MongoDB is going to be plugged in to the app.

Now we must create 3 new documents so that we can be able to put them all into an array, making them our default items.

const item1 = new Item({
  name: "Welcome to your todolist!"
});

const item2 = new Item ({
  name: "Hit the + button to create a new item."
});

const item3 ({
  name: "<-- Hit this to delete an item."
});

const defaultItems = [item1, item2, item3];

Now we can use the insertMany method from Mongoose so that we get to insert all of these items in one go into our items collection.

<ModelName>.insertMany(<documentArray>, function(err){
          //Deal with error or log success.
});

In our case:

Item.insertMany(defaultItems, function(err){
  is (err) {
    console.log(err);
  } else {
    console.log("Successfully saved default items to DB");
  }
});

This will be verified via the Unix Command Line


Gem: Coding is essentially an open book exam. You can refer to as many sources as you like in order to get to the answer

