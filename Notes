Note: Due to MongoDB & Mongoose version on the course is deprecated, 
      most of my lines of code may also be outdated/deprecated. 
      The purpose of creating this, however, is to go through the course and become educated on the material/fundamentals of backend development.

Saving our data to a MongoDB database so it can constantly update the inputs of our todolist.

This is the major difference between v1 & v2

This is important because if the server was to restart along with any changes being made on the app.js file, it will always be safely saved within the database.

Specified that the todolist is going to connect to the MongoDB along with the databse we want it to connect to (line 12 of app.js)

mongoose.connect("mongodb://localhost:27017/todolistDB", {useNewUrlParser: true});

Next is to create a Schema

const itemsSchema = {
  name: String
};

The next thing we need to create is a new Mongoose model based on this schema. 
This will be initialized by creating a new constant with 'mongoose.model' and then specify the singular collection name (String) and the schema name.

const Item = mongoose.model ("Item", itemsSchema)

So now we have a schema and we have a model created using that schema.

The next thing we want to do is delete everything that's related to this day and getDate from v1.

Deleting the following:
const day = date.getDate();
const date = require (__dirname + "/date.js");
the date.js file

This is to simplify our code instead of having to use our date module and instead of having this 'date' file, 
we're going to render the default list with a title that's called "Today".

Before: res.render("list", {listTitle: day, newListItems: items});
After: res.render("list", {listTitle: "Today", newListItems: items});

Simplifying this will allow us to understand how MongoDB is going to be plugged in to the app.

Now we must create 3 new documents so that we can be able to put them all into an array, making them our default items.

const item1 = new Item({
  name: "Welcome to your todolist!"
});

const item2 = new Item ({
  name: "Hit the + button to create a new item."
});

const item3 ({
  name: "<-- Hit this to delete an item."
});

const defaultItems = [item1, item2, item3];

Now we can use the insertMany method from Mongoose so that we get to insert all of these items in one go into our items collection.

<ModelName>.insertMany(<documentArray>, function(err){
          //Deal with error or log success.
});

In our case:

Item.insertMany(defaultItems, function(err){
  if (err) {
    console.log(err);
  } else {
    console.log("Successfully saved default items to DB");
  }
});

This will be verified via the Unix Command Line

But how can we do what's verified via the Unix Command Line inside of our items app.js so that we can actually send it over to our list.ejs to render our todolist?

This is where we use the Mongoose.find() method. 
We specify the model name and then we specify some conditions and get a callback which includes an error and the results from the find if there were any. 
We can then use the results documents insde the callback.

  Item.find({}, function(err, foundItems){
    console.log(foundItems);
  });

So while we're able to log all of our items by using that find function that Mongoose gave us as shown above, 
our website is kind of broken because it doesn't know what this 'items' is that we're trying to pass over to our list .ejs.

So let's go ahead and move our res.render into the mongoos.find callback instead of logging the found items. 
Now we're going to pass over foundItems to our list instead.

app.get("/", function(req, res) {

  Item.find({}, function(err, foundItems){
    res.render("list", {listTitle: "Today", newListItems: foundItems});
  });

});

This should fix 1 issue but we still have other issues. 

The first problem is that our items are being rendered in their entirety within each list items when we only want the part that comes in the name field.

Problem Example: {_id: 5bc9ba3e48cd8015b64087d7,
		name: 'Welcome to your todolist!',
		__v:0}

What we want: Welcome to yout todolist!

The second problem is that every single time that we rerun our app.js with nodemon we insert more items into our database 
because it's rerunning this item.insertMany line of code.

To address problem 1, we go to the views folder to then go to list.ejs, line 11 (newListItems[i])

This specific line happens to be a document inside our items collection. So instead of adding the entirety of the documents collection, 
we can simply tap into its name field.

newListItems[i].name

Now we must implement the FOR EACH method that we get access to in Javascript because we're currently using a traditional FOR LOOP 
that is causing a bit of a clutter which makes it difficult to see what's going on.

BEFORE: 
  <% for (let i=0; i<newListItems.length; i++) { %>
      <div class="item">
        <input type="checkbox">
        <p><%=  newListItems[i].name  %></p>
      </div>
      <% } %>

AFTER: 
<% newListItems.forEach(function(item){ %>
  <div class="item">
    <input type="checkbox">
    <p><%=  item.name  %></p>
  </div>
<% }) %>

The Second issue is the repeated inserts

app.get("/", function(req, res) {


  Item.find({}, function(err, foundItems){

    if (foundItems.length === 0) {
      Item.insertMany(defaultItems, function(err){
        if (err) {
          console.log(err);
        } else {
          console.log("Successfully saved default items to DB");
        }
      });
      res.redirect("/");
    } else {
      res.render("list", {listTitle: "Today", newListItems: foundItems});
    }
  });
});

So what this will do is it'll check firstly to see if there are any items in our items collection and
if there are none, then it's going to create three items and add it into items collection.

And then finally it's going to redirect back into this root route but now this time it's not going to fall into the IF block.

Instead it's going to go into the ELSE block because now we actually do have items in our items collection 
and were able to res.render those new items over to our list.ejs.

And now if we refresh our website we have all of our default items showing up but no matter how many times I restart my server 
You'll still only get three items and it doesn't stop building up.



Now let's look at how we are able to add new items into our ToDo list by switching
our database from an array over to MongoDB.

BEFORE:

app.post("/", function(req, res){

  const item = req.body.newItem;

  if (req.body.list === "Work") {
    workItems.push(item);
    res.redirect("/work");
  } else {
    items.push(item);
    res.redirect("/");
  }
});

AFTER:

  const itemName = req.body.newItem;

  const item = new Item ({
    name: itemName
  });

  item.save();

  res.redirect("/");

});

So now after we save our item, then we re-enter over here (line 41) and we find all the items inside our items collection and render it on the screen.

hit +, redirects to the home route and we see it update immediately.


 Deleting Items from our ToDoList Database

We also want to be able to delete the item when you click the check box next to it. And to do that we have to remove that particular document from items collection. 
Inside our list.ejs

app.post("/delete", function(req, res){
  console.log(req.body);
});


What we want is whenever we tick a checkbox we just want it to be able to delete that item.
The action has to happen when we check the checkbox.

<% newListItems.forEach(function(item){ %>
  <form action="/delete" methoid="post">
  <div class="item">
    <input type="checkbox" name="checkbox" value="<%=item._id%>onChange="this.form.submit()">
    <p><%=  item.name  %></p>
  </div>

When we pass new list items over we're passing over an array of Mongo documents.

Each of these documents or each of these items that we're looping through has a name as well as an ID.

So if you bind that ID to the value of each of the checkboxes, then when it gets checked you can submit this form and find out which item was actually checked off.

Now let's check off one of the items and now you can see I've got the ID of that item.

Once you've got the ID then everything else is so much easier because we can now delete the item with that particular ID.

app.post("/delete", function(req, res){
  const checkedItemId = req.body.checkbox;

  Item.findByIdAndRemove(checkedItemId, function(err){
    if (!err) {
      console.log("Successfully deleted checked item.");
    } 
  });
});

But in order for it to reflect in our web page then again we have to call a redirect. 

app.post("/delete", function(req, res){
  const checkedItemId = req.body.checkbox;

  Item.findByIdAndRemove(checkedItemId, function(err){
    if (!err) {
      console.log("Successfully deleted checked item.");
      res.redirect("/");
    }
  });
});


Creating Custom Lists using Express Route Parameters

Currently as it is our list works in terms of all of the basic functionality. 

We're able to add new items,we're able to delete items and we're able to look at all of the items in our list.

But there's one feature or one functionality that we should add which is to have multiple lists

Express allows us to use route parameters to create dynamic routes. 


But if we tried to add a new item in here then it actually doesn't work.

It takes us back to the default list called Today and then adds an item there.

So, We have to figure out how we can handle this inside that root route for the post request.

We need to pass over the current list that's being displayed which we have access to for the listTitle variable up here, 
and we need to pass it back when this form gets triggered.

Adding thew following to list.ejs: 
<button type="submit" name="list" value="<%= listTitle %>">+</button>

Now whenever we submit our form we should get acces to two things: one is the newItem and the second is the list.

Added the following to app.ejs:
  const listName = req.body.list;

  const item = new Item ({
    name: itemName
  });

  if (listName === "Today"){
    item.save();
    res.redirect("/");
  } else {
    List.findOne({name: listName}, function(err, foundList){
      foundList.items.push(item);
      foundList.save();
      res.redirect("/" + listName);
    });
  }

Now when you go to any dynamic route, you are able to add new Items to your dynamic/custom todolists, 
and it will remain captured within that respective list and you can categorize your items based off the list they were added to.


The last thing that we need to do is we need to be able to delete these items in our custom lists
because at the moment when I check this off then it somehow redirects me back to my home page 
instead of actually deleting the item that I wanted from that custom list.

Well, if you take a look inside our list.ejs at the moment the way that we're implementing the delete functionality is through the use of this form. 
And this form makes a post request to the /delete route and it passes over the item id that the user wanted to delete and the form gets triggered when one of the checkboxes gets clicked.

So here's a problem. 
In that route we only look for all of the items but we don't currently check which list the item is from in order to delete it from the correct list.

Added to list.ejs:
<input type="hidden" name="listName" value="<%= listTitle %>"></input>

Added to app.js:
const listName = req.body.listName;



So the next thing we need to do is we're going to again use an IF statement to check to see if we are making a 
post request to delete an item from the default list where the listName is today or if we're trying to delete an item from a custom list.

Now we're in a position we need to be able to find the list document that has the current listName and then we need to update that list to remove the checked item with that particular ID.

This is where the Mongoose findOneAndUpdate method comes in.

<ModelName>.findOneAndUpdate( {conditions}, {$pull: {field: {query}}}, function(err, results){});

List.findOneAndUpdate({name: listName}, {$pull: {items: {_id: checkedItemId}}}, callback)

We have to specifiy 3 things whel linking this method to the 'List':
1. Which List do you want to update?
2. What updates do you want to make?
3. A callback

1. The list that we want to find has to have a name that corresponds to this listName constant that we
got from our list.ejs.This is going to be the name of our custom list. 

Now that we found that document that corresponds to the customer list, how are we going to update it?

2. First thing we need is the $pull operator to then specify something we want to pull from 
and here ($pull: {}}) we have to provide the name of the array inside this list that we found and that name is going to be 'items' ($pull: {items}}) 
since it's the only array inside our list document.

But how do we know which item out of all of the items we want to pull? 
Here we have another further set of curly braces where we provide the query for matching the item ($pull: {items {}}}). 

The query we're going to make is we're going to pull the item which has an ID that corresponds to the checkedItemId ($pull: {items {_id: checkedItemId}}}).

List.findOneAndUpdate({name: listName}, {$pull: {items: {_id: checkedItemId}}}, callback)

 And now this is the entirety of our update statement where we pull from our items array an item that has an ID that corresponds to our checkedItemId. 

3. And now we're ready to write our callback

So again it's going to be a callback that gives you an error 
and a found list because in this case when we're calling findOneAndUpdate the find one corresponds to finding a list.

Now that we've found the list and we've updated it then if there are no errors we can simply res.redirect. 
And we're going to redirect again to that custom list path so it's going to be "/" + listName.

      if (!err) {
        console.log("Successfully deleted checked item.");
        res.redirect("/");
      }
    });
  } else {
    List.findOneAndUpdate({name: listName}, {$pull: {items: {_id: checkedItemId}}}, function(err, foundList))
     if (!err) {
       res.redirect("/" + listName);
     }
   });
  }



The last thing we need to work on are the custom parameters being case sensitive. 
so if you want to go to your Home page but type home, it would be two different lists. 

To fix this we'll simply use LoDash's _. capitalize string where it converts the first character of string to upper case and the remaining to lower case.

const customListName = _.capitalize(req.params.customListName);



Gem: Coding is essentially an open book exam. You can refer to as many sources as you like in order to get to the answer
